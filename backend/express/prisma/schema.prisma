// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 1. Generator & Data Source
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  STUDENT
  EXPERT
}

enum Specialty {
  FULL_STACK
  FRONTEND
  BACKEND
  MOBILE
  DATA_SCIENCE
  DESIGNER
  PRODUCT_MANAGER
  BUSINESS
  OTHER
}

enum Interest {
  AR_VR
  BEGINNER_FRIENDLY
  BLOCKCHAIN
  COMMUNICATION
  CYBERSECURITY
  DATABASES
  DESIGN
  DEVOPS
  ECOMMERCE
  EDUCATION
  ENTERPRISE
  FINTECH
  GAMING
  HEALTH
  IOT
  LIFEHACKS
  NO_CODE
  MACHINE_LEARNING
  MOBILE
  MUSIC_ART
  OPEN_ENDED
  PRODUCTIVITY
  QUANTUM
  RPA
  SERVERLESS
  SOCIAL_GOOD
  VOICE_SKILLS
  WEB
}

enum Occupation {
  STUDENT
  PROFESSIONAL
}

enum StudentLevel {
  COLLEGE
  HIGH_SCHOOL
  MIDDLE_SCHOOL
}

enum GraduationMonth {
  JAN
  FEB
  MAR
  APR
  MAY
  JUN
  JUL
  AUG
  SEP
  OCT
  NOV
  DEC
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// New Enums for Hackathon Features
enum HackathonStatus {
  UPCOMING
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  JUDGING // After submission deadline, before results
  COMPLETED // Results announced
  ARCHIVED // Old hackathons
}

enum ReviewType {
  MANUAL
  AI
}

model User {
  id                     String                  @id @default(cuid())
  clerkId                String                  @unique
  username               String                  @unique
  name                   String
  email                  String                  @unique
  profileImageUrl        String
  role                   Role                    @default(STUDENT)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  studentProfile         StudentProfile?
  expertProfile          ExpertProfile?
  companiesCreated       Company[]               @relation("UserCreatedCompanies")
  githubUrl              String?                 @db.VarChar(255)
  linkedinUrl            String?                 @db.VarChar(255)
  twitterUrl             String?                 @db.VarChar(255)
  // New relations for Hackathons
  hackathonsCreated      Hackathon[]
  hackathonRegistrations HackathonRegistration[]
}

model StudentProfile {
  id              String          @id @default(cuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty       Specialty
  skills          String[]
  bio             String?
  interests       Interest[]
  location        String
  timezone        String
  occupation      Occupation
  studentLevel    StudentLevel
  schoolName      String
  graduationMonth GraduationMonth
  graduationYear  Int
  birthMonth      Int
  birthYear       Int
}

model Company {
  id             String               @id @default(cuid())
  name           String               @unique
  websiteUrl     String?
  description    String?
  emailDomain    String?              @default("")
  phoneNumber    String
  isInternalOnly Boolean              @default(false)
  approved       Boolean              @default(true) // For MVP, keeping true. Admin will verify.
  createdById    String
  createdBy      User                 @relation("UserCreatedCompanies", fields: [createdById], references: [id], onDelete: Cascade)
  experts        ExpertProfile[]
  joinRequests   CompanyJoinRequest[]
  // New relation for Hackathons
  hackathons     Hackathon[]          // Hackathons hosted by this company (optional)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model ExpertProfile {
  id                  String               @id @default(cuid())
  userId              String               @unique
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty           Specialty
  bio                 String?
  skills              String[]
  interests           Interest[]
  companyId           String?
  company             Company?             @relation(fields: [companyId], references: [id], onDelete: SetNull)
  isApprovedInCompany Boolean              @default(false)
  joinRequests        CompanyJoinRequest[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model CompanyJoinRequest {
  id              String            @id @default(cuid())
  expertProfileId String
  expertProfile   ExpertProfile     @relation(fields: [expertProfileId], references: [id], onDelete: Cascade)
  companyId       String
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status          JoinRequestStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

// ===========================================
// NEW MODELS FOR HACKATHONS
// ===========================================

model Hackathon {
  id                  String            @id @default(cuid())
  title               String            @unique
  slug                String            @unique // For nice, SEO-friendly URLs
  description         String
  rules               String?
  bannerImageUrl      String?           // URL from Imagekit
  startDate           DateTime
  endDate             DateTime
  registrationEndDate DateTime          // Deadline for registration
  submissionEndDate   DateTime          // Deadline for project submission
  status              HackathonStatus   @default(UPCOMING)
  reviewType          ReviewType        @default(MANUAL) // AI or MANUAL review

  createdByUserId     String
  createdBy           User              @relation(fields: [createdByUserId], references: [id]) // Link to the User who created it
  companyId           String?           // Optional: Link to the company hosting it
  company             Company?          @relation(fields: [companyId], references: [id]) // Relation to Company model

  registrations       HackathonRegistration[] // Registrations for this hackathon
  submissions         ProjectSubmission[]     // All project submissions under this hackathon

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  // prizes Json? // Future: store prize details here
  // judges ExpertProfile[] // Future: link judges to hackathon
}

model HackathonRegistration {
  id          String    @id @default(cuid())
  hackathonId String
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  registeredAt DateTime @default(now())

  submission  ProjectSubmission? // One-to-one link for the project submitted by this registration

  @@unique([hackathonId, userId]) // A user can only register once per hackathon
}

model ProjectSubmission {
  id                 String              @id @default(cuid())
  registrationId     String              @unique // Unique link to a HackathonRegistration
  registration       HackathonRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  hackathonId        String              // Redundant but useful for direct queries
  hackathon          Hackathon           @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  submissionUrl      String?             // e.g., GitHub repo, live demo link
  submissionText     String?             // Direct text content (for MVP AI)
  // submittedFileUrl String?             // Future: for actual file uploads (zips, PDFs)
  score              Int?                // AI generated score (0-100)
  manualReviewScore  Int?                // Manual review score (0-100)
  feedback           String?             // AI feedback or manual expert feedback
  status             String              @default("PENDING_REVIEW") // PENDING_REVIEW, REVIEWED_AI, REVIEWED_MANUAL, GRADING_COMPLETE

  submittedAt        DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}
